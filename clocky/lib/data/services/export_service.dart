import 'package:intl/intl.dart';
import '../models/client.dart';
import '../models/project.dart';
import '../models/time_entry.dart';

class ExportService {
  String generateClientCsv({
    required Client client,
    required List<Project> projects,
    required List<TimeEntry> entries,
    required DateTime startDate,
    required DateTime endDate,
  }) {
    final now = DateTime.now();
    final dateFormat = DateFormat('yyyy-MM-dd');
    final timeFormat = DateFormat('HH:mm');

    // Filter entries by date range and client's projects
    final clientProjects = projects.where((p) => p.clientId == client.id).toList();
    final clientProjectIds = clientProjects.map((p) => p.id).toSet();
    final filteredEntries = entries.where((e) => 
      clientProjectIds.contains(e.projectId) &&
      e.startTime.isAfter(startDate.subtract(const Duration(seconds: 1))) &&
      e.startTime.isBefore(endDate.add(const Duration(days: 1))) &&
      e.isBillable
    ).toList();

    // Sort entries by date
    filteredEntries.sort((a, b) => a.startTime.compareTo(b.startTime));

    final buffer = StringBuffer();
    
    // Write metadata
    buffer.writeln('Generated by Clocky on ${dateFormat.format(now)} at ${timeFormat.format(now)}');
    buffer.writeln('');
    buffer.writeln('Client Information');
    buffer.writeln('-----------------');
    buffer.writeln('Name: ${client.name}');
    buffer.writeln('Email: ${client.email ?? "Not provided"}');
    buffer.writeln('Hourly Rate: \$${client.hourlyRate.toStringAsFixed(2)}');
    buffer.writeln('');
    buffer.writeln('Invoice Period');
    buffer.writeln('--------------');
    buffer.writeln('Start Date: ${dateFormat.format(startDate)}');
    buffer.writeln('End Date: ${dateFormat.format(endDate)}');
    buffer.writeln('');

    if (filteredEntries.isEmpty) {
      buffer.writeln('No billable time entries found for this period.');
      return buffer.toString();
    }

    // Write column headers
    buffer.writeln('Time Entries');
    buffer.writeln('-----------');
    buffer.writeln('Date,Project,Description,Start Time,End Time,Hours,Rate,Amount');

    // Group entries by project for subtotals
    final projectGroups = <String, List<TimeEntry>>{};
    for (final entry in filteredEntries) {
      projectGroups.putIfAbsent(entry.projectId, () => []).add(entry);
    }

    // Write entries grouped by project
    for (final projectId in projectGroups.keys) {
      final project = projects.firstWhere(
        (p) => p.id == projectId,
        orElse: () => Project.create(
          clientId: client.id,
          name: 'Unknown Project',
        ),
      );
      
      final projectEntries = projectGroups[projectId]!;
      Duration projectTotal = Duration.zero;
      double projectAmount = 0;

      buffer.writeln();
      buffer.writeln('${project.name}');

      for (final entry in projectEntries) {
        final hours = entry.duration.inMinutes / 60.0;
        final amount = hours * client.hourlyRate;
        projectTotal += entry.duration;
        projectAmount += amount;

        buffer.writeln(
          '${dateFormat.format(entry.startTime)},'
          '"${project.name}",'
          '"${entry.description ?? ''}",'
          '${timeFormat.format(entry.startTime)},'
          '${entry.endTime != null ? timeFormat.format(entry.endTime!) : "In Progress"},'
          '${hours.toStringAsFixed(2)},'
          '\$${client.hourlyRate.toStringAsFixed(2)},'
          '\$${amount.toStringAsFixed(2)}'
        );
      }

      // Write project subtotal
      buffer.writeln(
        ',,'
        '"Project Total",,,'
        '${(projectTotal.inMinutes / 60.0).toStringAsFixed(2)},,'
        '\$${projectAmount.toStringAsFixed(2)}'
      );
    }

    // Write grand total
    Duration totalDuration = Duration.zero;
    double totalAmount = 0;

    for (final entry in filteredEntries) {
      totalDuration += entry.duration;
      totalAmount += (entry.duration.inMinutes / 60.0) * client.hourlyRate;
    }

    buffer.writeln();
    buffer.writeln(
      ',,'
      '"GRAND TOTAL",,,'
      '${(totalDuration.inMinutes / 60.0).toStringAsFixed(2)},,'
      '\$${totalAmount.toStringAsFixed(2)}'
    );

    return buffer.toString();
  }
}